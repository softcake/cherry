
/*
 * Copyright 2017 softcake.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.internal.jvm.Jvm

import java.text.SimpleDateFormat

status = version.toString().endsWith("-SNAPSHOT") ? 'snapshot' : 'release'

Date buildTimeAndDate = new Date()

ext {
    isSnapshot = version.toString().endsWith("-SNAPSHOT")
    isTravis = System.getenv("TRAVIS") != null
    isCi = isTravis
    isPullRequest = isTravis ? System.getenv('TRAVIS_PULL_REQUEST') != "false" : false
    hasTravisSecEnv = System.getenv('TRAVIS_SECURE_ENV_VARS') == "true"
    jvm = Jvm.current()
    isWindows = org.gradle.internal.os.OperatingSystem.current().windows

    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss').format(buildTimeAndDate)
    buildYear = new SimpleDateFormat('yyyy').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
    builtByValue = project.hasProperty("builtBy") ? project.builtBy : project.defaultBuiltBy

}

ext.normalizeVersion = { versionLiteral ->
    try {
        (versionLiteral =~ /(\d+)\.(\d+)\.(\d+).*/)[0][1..3].join('.')
    } catch (x) {
        throw new GradleException(
                "Version '$versionLiteral' does not match version pattern, e.g." + " 5.0" +
                        ".0-QUALIFIER")
    }
}

if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException("Must be built with Java 8 or higher")
}
